---
description: Best practices for implementing Domain-Driven Design in Go
globs: **/*.go
alwaysApply: true
---

- Identify and define bounded contexts to encapsulate domain logic and prevent ambiguity.
- Use aggregates to manage consistency boundaries and enforce invariants within your domain.
- Implement domain events to facilitate communication between different parts of the system.
- Keep your domain model rich by encapsulating behavior and state together.
- Use factories to create complex objects and ensure that the creation logic is encapsulated.
- Regularly refactor to maintain a clean and expressive domain model as the understanding of the domain evolves.